/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as OnboardingRouteRouteImport } from './routes/onboarding/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as platformRouteRouteImport } from './routes/(platform)/route'
import { Route as OnboardingIndexRouteImport } from './routes/onboarding/index'
import { Route as AuthPathnameRouteImport } from './routes/auth/$pathname'
import { Route as platformDashboardRouteRouteImport } from './routes/(platform)/dashboard/route'
import { Route as platformDashboardIndexRouteImport } from './routes/(platform)/dashboard/index'
import { Route as platformOwnerDashboardRouteRouteImport } from './routes/(platform)/owner/dashboard/route'
import { Route as platformAdminDashboardRouteRouteImport } from './routes/(platform)/admin/dashboard/route'
import { Route as platformOwnerDashboardIndexRouteImport } from './routes/(platform)/owner/dashboard/index'
import { Route as platformAdminDashboardIndexRouteImport } from './routes/(platform)/admin/dashboard/index'
import { Route as platformAdminApprovalIndexRouteImport } from './routes/(platform)/admin/approval/index'
import { Route as platformAdminDashboardElectionsNewRouteImport } from './routes/(platform)/admin/dashboard/elections/new'
import { Route as platformAdminDashboardElectionsElectionIdIndexRouteImport } from './routes/(platform)/admin/dashboard/elections/$electionId/index'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc/$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const OnboardingRouteRoute = OnboardingRouteRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const platformRouteRoute = platformRouteRouteImport.update({
  id: '/(platform)',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingIndexRoute = OnboardingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OnboardingRouteRoute,
} as any)
const AuthPathnameRoute = AuthPathnameRouteImport.update({
  id: '/$pathname',
  path: '/$pathname',
  getParentRoute: () => AuthRouteRoute,
} as any)
const platformDashboardRouteRoute = platformDashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => platformRouteRoute,
} as any)
const platformDashboardIndexRoute = platformDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => platformDashboardRouteRoute,
} as any)
const platformOwnerDashboardRouteRoute =
  platformOwnerDashboardRouteRouteImport.update({
    id: '/owner/dashboard',
    path: '/owner/dashboard',
    getParentRoute: () => platformRouteRoute,
  } as any)
const platformAdminDashboardRouteRoute =
  platformAdminDashboardRouteRouteImport.update({
    id: '/admin/dashboard',
    path: '/admin/dashboard',
    getParentRoute: () => platformRouteRoute,
  } as any)
const platformOwnerDashboardIndexRoute =
  platformOwnerDashboardIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => platformOwnerDashboardRouteRoute,
  } as any)
const platformAdminDashboardIndexRoute =
  platformAdminDashboardIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => platformAdminDashboardRouteRoute,
  } as any)
const platformAdminApprovalIndexRoute =
  platformAdminApprovalIndexRouteImport.update({
    id: '/admin/approval/',
    path: '/admin/approval/',
    getParentRoute: () => platformRouteRoute,
  } as any)
const platformAdminDashboardElectionsNewRoute =
  platformAdminDashboardElectionsNewRouteImport.update({
    id: '/elections/new',
    path: '/elections/new',
    getParentRoute: () => platformAdminDashboardRouteRoute,
  } as any)
const platformAdminDashboardElectionsElectionIdIndexRoute =
  platformAdminDashboardElectionsElectionIdIndexRouteImport.update({
    id: '/elections/$electionId/',
    path: '/elections/$electionId/',
    getParentRoute: () => platformAdminDashboardRouteRoute,
  } as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof platformRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/onboarding': typeof OnboardingRouteRouteWithChildren
  '/dashboard': typeof platformDashboardRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/admin/dashboard': typeof platformAdminDashboardRouteRouteWithChildren
  '/owner/dashboard': typeof platformOwnerDashboardRouteRouteWithChildren
  '/dashboard/': typeof platformDashboardIndexRoute
  '/admin/approval': typeof platformAdminApprovalIndexRoute
  '/admin/dashboard/': typeof platformAdminDashboardIndexRoute
  '/owner/dashboard/': typeof platformOwnerDashboardIndexRoute
  '/admin/dashboard/elections/new': typeof platformAdminDashboardElectionsNewRoute
  '/admin/dashboard/elections/$electionId': typeof platformAdminDashboardElectionsElectionIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof platformRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/dashboard': typeof platformDashboardIndexRoute
  '/admin/approval': typeof platformAdminApprovalIndexRoute
  '/admin/dashboard': typeof platformAdminDashboardIndexRoute
  '/owner/dashboard': typeof platformOwnerDashboardIndexRoute
  '/admin/dashboard/elections/new': typeof platformAdminDashboardElectionsNewRoute
  '/admin/dashboard/elections/$electionId': typeof platformAdminDashboardElectionsElectionIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(platform)': typeof platformRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/onboarding': typeof OnboardingRouteRouteWithChildren
  '/(platform)/dashboard': typeof platformDashboardRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/(platform)/admin/dashboard': typeof platformAdminDashboardRouteRouteWithChildren
  '/(platform)/owner/dashboard': typeof platformOwnerDashboardRouteRouteWithChildren
  '/(platform)/dashboard/': typeof platformDashboardIndexRoute
  '/(platform)/admin/approval/': typeof platformAdminApprovalIndexRoute
  '/(platform)/admin/dashboard/': typeof platformAdminDashboardIndexRoute
  '/(platform)/owner/dashboard/': typeof platformOwnerDashboardIndexRoute
  '/(platform)/admin/dashboard/elections/new': typeof platformAdminDashboardElectionsNewRoute
  '/(platform)/admin/dashboard/elections/$electionId/': typeof platformAdminDashboardElectionsElectionIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/onboarding'
    | '/dashboard'
    | '/auth/$pathname'
    | '/onboarding/'
    | '/admin/dashboard'
    | '/owner/dashboard'
    | '/dashboard/'
    | '/admin/approval'
    | '/admin/dashboard/'
    | '/owner/dashboard/'
    | '/admin/dashboard/elections/new'
    | '/admin/dashboard/elections/$electionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/auth/$pathname'
    | '/onboarding'
    | '/dashboard'
    | '/admin/approval'
    | '/admin/dashboard'
    | '/owner/dashboard'
    | '/admin/dashboard/elections/new'
    | '/admin/dashboard/elections/$electionId'
  id:
    | '__root__'
    | '/(platform)'
    | '/auth'
    | '/onboarding'
    | '/(platform)/dashboard'
    | '/auth/$pathname'
    | '/onboarding/'
    | '/(platform)/admin/dashboard'
    | '/(platform)/owner/dashboard'
    | '/(platform)/dashboard/'
    | '/(platform)/admin/approval/'
    | '/(platform)/admin/dashboard/'
    | '/(platform)/owner/dashboard/'
    | '/(platform)/admin/dashboard/elections/new'
    | '/(platform)/admin/dashboard/elections/$electionId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  platformRouteRoute: typeof platformRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  OnboardingRouteRoute: typeof OnboardingRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/rpc/$'
  id: '__root__' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(platform)': {
      id: '/(platform)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof platformRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/': {
      id: '/onboarding/'
      path: '/'
      fullPath: '/onboarding/'
      preLoaderRoute: typeof OnboardingIndexRouteImport
      parentRoute: typeof OnboardingRouteRoute
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/(platform)/dashboard': {
      id: '/(platform)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof platformDashboardRouteRouteImport
      parentRoute: typeof platformRouteRoute
    }
    '/(platform)/dashboard/': {
      id: '/(platform)/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof platformDashboardIndexRouteImport
      parentRoute: typeof platformDashboardRouteRoute
    }
    '/(platform)/owner/dashboard': {
      id: '/(platform)/owner/dashboard'
      path: '/owner/dashboard'
      fullPath: '/owner/dashboard'
      preLoaderRoute: typeof platformOwnerDashboardRouteRouteImport
      parentRoute: typeof platformRouteRoute
    }
    '/(platform)/admin/dashboard': {
      id: '/(platform)/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof platformAdminDashboardRouteRouteImport
      parentRoute: typeof platformRouteRoute
    }
    '/(platform)/owner/dashboard/': {
      id: '/(platform)/owner/dashboard/'
      path: '/'
      fullPath: '/owner/dashboard/'
      preLoaderRoute: typeof platformOwnerDashboardIndexRouteImport
      parentRoute: typeof platformOwnerDashboardRouteRoute
    }
    '/(platform)/admin/dashboard/': {
      id: '/(platform)/admin/dashboard/'
      path: '/'
      fullPath: '/admin/dashboard/'
      preLoaderRoute: typeof platformAdminDashboardIndexRouteImport
      parentRoute: typeof platformAdminDashboardRouteRoute
    }
    '/(platform)/admin/approval/': {
      id: '/(platform)/admin/approval/'
      path: '/admin/approval'
      fullPath: '/admin/approval'
      preLoaderRoute: typeof platformAdminApprovalIndexRouteImport
      parentRoute: typeof platformRouteRoute
    }
    '/(platform)/admin/dashboard/elections/new': {
      id: '/(platform)/admin/dashboard/elections/new'
      path: '/elections/new'
      fullPath: '/admin/dashboard/elections/new'
      preLoaderRoute: typeof platformAdminDashboardElectionsNewRouteImport
      parentRoute: typeof platformAdminDashboardRouteRoute
    }
    '/(platform)/admin/dashboard/elections/$electionId/': {
      id: '/(platform)/admin/dashboard/elections/$electionId/'
      path: '/elections/$electionId'
      fullPath: '/admin/dashboard/elections/$electionId'
      preLoaderRoute: typeof platformAdminDashboardElectionsElectionIdIndexRouteImport
      parentRoute: typeof platformAdminDashboardRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface platformDashboardRouteRouteChildren {
  platformDashboardIndexRoute: typeof platformDashboardIndexRoute
}

const platformDashboardRouteRouteChildren: platformDashboardRouteRouteChildren =
  {
    platformDashboardIndexRoute: platformDashboardIndexRoute,
  }

const platformDashboardRouteRouteWithChildren =
  platformDashboardRouteRoute._addFileChildren(
    platformDashboardRouteRouteChildren,
  )

interface platformAdminDashboardRouteRouteChildren {
  platformAdminDashboardIndexRoute: typeof platformAdminDashboardIndexRoute
  platformAdminDashboardElectionsNewRoute: typeof platformAdminDashboardElectionsNewRoute
  platformAdminDashboardElectionsElectionIdIndexRoute: typeof platformAdminDashboardElectionsElectionIdIndexRoute
}

const platformAdminDashboardRouteRouteChildren: platformAdminDashboardRouteRouteChildren =
  {
    platformAdminDashboardIndexRoute: platformAdminDashboardIndexRoute,
    platformAdminDashboardElectionsNewRoute:
      platformAdminDashboardElectionsNewRoute,
    platformAdminDashboardElectionsElectionIdIndexRoute:
      platformAdminDashboardElectionsElectionIdIndexRoute,
  }

const platformAdminDashboardRouteRouteWithChildren =
  platformAdminDashboardRouteRoute._addFileChildren(
    platformAdminDashboardRouteRouteChildren,
  )

interface platformOwnerDashboardRouteRouteChildren {
  platformOwnerDashboardIndexRoute: typeof platformOwnerDashboardIndexRoute
}

const platformOwnerDashboardRouteRouteChildren: platformOwnerDashboardRouteRouteChildren =
  {
    platformOwnerDashboardIndexRoute: platformOwnerDashboardIndexRoute,
  }

const platformOwnerDashboardRouteRouteWithChildren =
  platformOwnerDashboardRouteRoute._addFileChildren(
    platformOwnerDashboardRouteRouteChildren,
  )

interface platformRouteRouteChildren {
  platformDashboardRouteRoute: typeof platformDashboardRouteRouteWithChildren
  platformAdminDashboardRouteRoute: typeof platformAdminDashboardRouteRouteWithChildren
  platformOwnerDashboardRouteRoute: typeof platformOwnerDashboardRouteRouteWithChildren
  platformAdminApprovalIndexRoute: typeof platformAdminApprovalIndexRoute
}

const platformRouteRouteChildren: platformRouteRouteChildren = {
  platformDashboardRouteRoute: platformDashboardRouteRouteWithChildren,
  platformAdminDashboardRouteRoute:
    platformAdminDashboardRouteRouteWithChildren,
  platformOwnerDashboardRouteRoute:
    platformOwnerDashboardRouteRouteWithChildren,
  platformAdminApprovalIndexRoute: platformAdminApprovalIndexRoute,
}

const platformRouteRouteWithChildren = platformRouteRoute._addFileChildren(
  platformRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthPathnameRoute: typeof AuthPathnameRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthPathnameRoute: AuthPathnameRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface OnboardingRouteRouteChildren {
  OnboardingIndexRoute: typeof OnboardingIndexRoute
}

const OnboardingRouteRouteChildren: OnboardingRouteRouteChildren = {
  OnboardingIndexRoute: OnboardingIndexRoute,
}

const OnboardingRouteRouteWithChildren = OnboardingRouteRoute._addFileChildren(
  OnboardingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  platformRouteRoute: platformRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  OnboardingRouteRoute: OnboardingRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
