/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as OnboardingRouteRouteImport } from './routes/onboarding/route'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OnboardingIndexRouteImport } from './routes/onboarding/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as AuthPathnameRouteImport } from './routes/auth/$pathname'
import { Route as AdminAuthRouteRouteImport } from './routes/admin/auth/route'
import { Route as AdminAuthIndexRouteImport } from './routes/admin/auth/index'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc/$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const OnboardingRouteRoute = OnboardingRouteRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingIndexRoute = OnboardingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OnboardingRouteRoute,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const AuthPathnameRoute = AuthPathnameRouteImport.update({
  id: '/$pathname',
  path: '/$pathname',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AdminAuthRouteRoute = AdminAuthRouteRouteImport.update({
  id: '/admin/auth',
  path: '/admin/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAuthIndexRoute = AdminAuthIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminAuthRouteRoute,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/onboarding': typeof OnboardingRouteRouteWithChildren
  '/admin/auth': typeof AdminAuthRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/admin/auth/': typeof AdminAuthIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/dashboard': typeof DashboardIndexRoute
  '/onboarding': typeof OnboardingIndexRoute
  '/admin/auth': typeof AdminAuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/onboarding': typeof OnboardingRouteRouteWithChildren
  '/admin/auth': typeof AdminAuthRouteRouteWithChildren
  '/auth/$pathname': typeof AuthPathnameRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/onboarding/': typeof OnboardingIndexRoute
  '/admin/auth/': typeof AdminAuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/onboarding'
    | '/admin/auth'
    | '/auth/$pathname'
    | '/dashboard/'
    | '/onboarding/'
    | '/admin/auth/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/auth/$pathname'
    | '/dashboard'
    | '/onboarding'
    | '/admin/auth'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/dashboard'
    | '/onboarding'
    | '/admin/auth'
    | '/auth/$pathname'
    | '/dashboard/'
    | '/onboarding/'
    | '/admin/auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  OnboardingRouteRoute: typeof OnboardingRouteRouteWithChildren
  AdminAuthRouteRoute: typeof AdminAuthRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/rpc/$'
  id: '__root__' | '/api/auth/$' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/': {
      id: '/onboarding/'
      path: '/'
      fullPath: '/onboarding/'
      preLoaderRoute: typeof OnboardingIndexRouteImport
      parentRoute: typeof OnboardingRouteRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/auth/$pathname': {
      id: '/auth/$pathname'
      path: '/$pathname'
      fullPath: '/auth/$pathname'
      preLoaderRoute: typeof AuthPathnameRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/admin/auth': {
      id: '/admin/auth'
      path: '/admin/auth'
      fullPath: '/admin/auth'
      preLoaderRoute: typeof AdminAuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/auth/': {
      id: '/admin/auth/'
      path: '/'
      fullPath: '/admin/auth/'
      preLoaderRoute: typeof AdminAuthIndexRouteImport
      parentRoute: typeof AdminAuthRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthRouteRouteChildren {
  AuthPathnameRoute: typeof AuthPathnameRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthPathnameRoute: AuthPathnameRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface OnboardingRouteRouteChildren {
  OnboardingIndexRoute: typeof OnboardingIndexRoute
}

const OnboardingRouteRouteChildren: OnboardingRouteRouteChildren = {
  OnboardingIndexRoute: OnboardingIndexRoute,
}

const OnboardingRouteRouteWithChildren = OnboardingRouteRoute._addFileChildren(
  OnboardingRouteRouteChildren,
)

interface AdminAuthRouteRouteChildren {
  AdminAuthIndexRoute: typeof AdminAuthIndexRoute
}

const AdminAuthRouteRouteChildren: AdminAuthRouteRouteChildren = {
  AdminAuthIndexRoute: AdminAuthIndexRoute,
}

const AdminAuthRouteRouteWithChildren = AdminAuthRouteRoute._addFileChildren(
  AdminAuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  OnboardingRouteRoute: OnboardingRouteRouteWithChildren,
  AdminAuthRouteRoute: AdminAuthRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
